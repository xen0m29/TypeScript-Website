{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/jsx.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/id/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/2/types-from-extraction.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/2/types-from-transformation.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/id/docs/handbook/intro-to-js-ts.html"},{"path":"/id/docs/handbook/configuring-watch.html"},{"path":"/id/docs/handbook/jsdoc-supported-types.html"},{"path":"/id/docs/handbook/iterators-and-generators.html"},{"path":"/id/docs/handbook/decorators.html"},{"path":"/id/docs/handbook/jsx.html"},{"path":"/id/docs/handbook/dom-manipulation.html"},{"path":"/id/docs/handbook/react.html"},{"path":"/id/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/id/docs/handbook/mixins.html"},{"path":"/id/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/es/play"},{"path":"/id/play"},{"path":"/ko/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/play"},{"path":"/fa/play"},{"path":"/ja/play"},{"path":"/pt/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"0822e4cd-4703-5992-b1fe-7984b9f1a67e","excerpt":"JSX adalah sebuah sintaks tertanam, yang seperti XML.\nIni dimaksudkan untuk diubah menjadi JavaScript yang valid, meskipun semantik dari transformasi itu khusus…","html":"<p><a href=\"https://facebook.github.io/jsx/\">JSX</a> adalah sebuah sintaks tertanam, yang seperti XML.\nIni dimaksudkan untuk diubah menjadi JavaScript yang valid, meskipun semantik dari transformasi itu khusus untuk implementasi.\nJSX menjadi populer dengan kerangka kerja <a href=\"https://reactjs.org/\">React</a>, tetapi sejak itu juga melihat implementasi lain.\nTypeScript mendukung embeding, pemeriksaan type, dan mengkompilasi JSX secara langsung ke JavaScript.</p>\n<h2 id=\"dasar-penggunaan\" style=\"position:relative;\"><a href=\"#dasar-penggunaan\" aria-label=\"dasar penggunaan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dasar Penggunaan</h2>\n<p>Untuk menggunakan JSX, anda harus melakukan dua hal berikut:</p>\n<ol>\n<li>Penamaan file dengan ekstensi <code>.tsx</code></li>\n<li>Mengaktifkan opsi <code>jsx</code></li>\n</ol>\n<p>TypeScript memiliki tiga jenis mode JSX: <code>preserve</code>, <code>react</code>, dan <code>react-native</code>.\nMode tersebut hanya berlaku untuk stage, sedangkan untuk pemeriksaan type, hal itu tidak berlaku.\nMode <code>preserve</code> akan mempertahankan JSX sebagai bagian dari output untuk selanjutnya digunakan oleh langkah transformasi lain (mis. <a href=\"https://babeljs.io/\">Babel</a>).\nSelain itu, output-nya akan memiliki ekstensi file <code>.jsx</code>.\nMode <code>react</code> akan mengeluarkan<code>React.createElement</code>, tidak perlu melalui transformasi JSX sebelum digunakan, dan outputnya akan memiliki ekstensi file <code>.js</code>.\nMode <code>react-native</code> sama dengan <code>pertahankan</code> yang mempertahankan semua JSX, tetapi hasilnya justru akan memiliki ekstensi file <code>.js</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Input</th>\n<th>Output</th>\n<th>Output File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>preserve</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.jsx</code></td>\n</tr>\n<tr>\n<td><code>react</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>React.createElement(\"div\")</code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-native</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.js</code></td>\n</tr>\n</tbody>\n</table>\n<p>Anda dapat menetapkan mode ini menggunakan flag baris perintah <code>--jsx</code> atau opsi yang sesuai di file <a href=\"/docs/handbook/tsconfig-json.html\">tsconfig.json</a> Anda.</p>\n<blockquote>\n<p>*Catatan: Anda dapat menentukan fungsi factory JSX yang akan digunakan saat menargetkan react JSX emit dengan opsi <code>--jsxFactory</code> (default ke <code>React.createElement</code>)</p>\n</blockquote>\n<h2 id=\"opeartor-as\" style=\"position:relative;\"><a href=\"#opeartor-as\" aria-label=\"opeartor as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opeartor <code>as</code></h2>\n<p>Ingat bagaimana menulis penegasan type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo </span><span style=\"color: #000000\">= &lt;foo&gt;</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Ini menegaskan variabel <code>bar</code> memiliki type <code>foo</code>.\nSejak TypeScript juga menggunakan kurung siku untuk penegasan type, mengkombinasikannya dengan sintaks JSX akan menimbulkan kesulitan tertentu. Hasilnya, TypeScript tidak membolehkan penggunaan kurung siku untuk penegasan type pada file <code>.tsx</code>.</p>\n<p>Karena sintaks diatas tidak bisa digunakan pada file <code>.tsx</code>, maka alternatif untuk penegasan type dapat menggunakan operator <code>as</code>.\nContohnya dapat dengan mudah ditulis ulang dengan operator <code>as</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> foo;</span></code></div></pre>\n<p>Operator <code>as</code> tersedia dikedua jenis file, <code>.ts</code> dan <code>.tsx</code>, dan memiliki perlakuan yang sama seperti penegasan type menggunakan kurung siku.</p>\n<h2 id=\"pemeriksaan-type\" style=\"position:relative;\"><a href=\"#pemeriksaan-type\" aria-label=\"pemeriksaan type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pemeriksaan Type</h2>\n<p>Urutan yang harus dimengerti mengenai pemeriksaan type di JSX, yaitu pertama anda harus memahami perbedaan antara elemen intrinsik dan elemen berbasiskan nilai. Terdapat sebuah ekspresi <code>&#x3C;expr /></code> dan <code>expr</code> yang mungkin mengacu pada suatu hal yang intrinsik pada suatu lingkungan (misalnya <code>div</code> atau <code>span</code> dalam lingkungan DOM) atau pada komponen custom yang telah Anda buat.\nIni penting karena dua alasan berikut:</p>\n<ol>\n<li>Untuk React, elemen intrinsik dianggap sebagai string (<code>React.createElement(\"div\")</code>), sedangkan komponen yang Anda buat bukan (<code>React.createElement(MyComponent)</code>).</li>\n<li>Type dari atribut yang dilewatkan ke elemen JSX seharusnya terlihat berbeda.\nAtribut elemen intrinsik seharusnya diketahui <em>secara intrinsik</em> sedangkan komponen akan seperti ingin untuk menentukan kumpulan atribut mereka sendiri.</li>\n</ol>\n<p>TypeScript menggunakan <a href=\"http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components\">beberapa convention yang dengan React</a> untuk membedakannya.\nElemen intrinsik selalu dimulai dengan huruf kecil, dan elemen berbasiskan nilai selalu dimulai dengan huruf besar.</p>\n<h2 id=\"elemen-intrinsik\" style=\"position:relative;\"><a href=\"#elemen-intrinsik\" aria-label=\"elemen intrinsik permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elemen intrinsik</h2>\n<p>Elemen intrinsik dicari pada interface khusus, yaitu <code>JSX.IntrinsicElements</code>.\nStandarnya, jika interface ini tidak ditentukan, maka apapun yang terjadi dan elemen intrinsik tidak akan diperiksa type-nya.\nNamun, jika interface ini ada, maka nama elemen intrinsik akan dicari sebagai property di interface <code>JSX.IntrinsicElements</code>.\nContohnya:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> IntrinsicElements {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></code></div></pre>\n<p>Pada contoh diatas, <code>&#x3C;foo /></code> akan berjalan dengan baik, tapi <code>&#x3C;bar /></code> akan menghasilkan error, karena <code>&#x3C;bar /></code> tidak ditentukan pada interface <code>JSX.IntrinsicElements</code>.</p>\n<blockquote>\n<p>Catatan: Anda juga bisa menentukan indexer untuk mendapatkan seluruh elemen bertipe string didalam <code>JSX.IntrinsicElements</code>, seperti berikut:</p>\n</blockquote>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> IntrinsicElements {</span>\n<span style=\"color: #000000\">    [</span><span style=\"color: #1A1A1A\">elemName</span><span style=\"color: #000000\">: string]: any;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"elemen-berbasiskan-nilai\" style=\"position:relative;\"><a href=\"#elemen-berbasiskan-nilai\" aria-label=\"elemen berbasiskan nilai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elemen Berbasiskan Nilai</h2>\n<p>Elemen berbasiskan nilai akan dicari oleh identifier yang ada pada sebuah scope.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./myComponent\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">SomeOtherComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></code></div></pre>\n<p>Terdapat dua cara untuk mendefinisikan sebuah elemen berbasiskan nilai, yaitu:</p>\n<ol>\n<li>Function Component (FC)</li>\n<li>Class Component</li>\n</ol>\n<p>Karena kedua jenis elemen berbasis nilai ini tidak dapat dibedakan satu sama lain dalam ekspresi JSX, maka pertama TS akan mencoba menyelesaikan ekspresi tersebut sebagai Function Component menggunakan overloading. Jika proses berhasil, maka TS selesai menyelesaikan ekspresi ke deklarasinya. Jika gagal untuk menyelesaikan sebagai Function Component, maka TS kemudian akan mencoba untuk menyelesaikannya sebagai Class Component. Jika gagal, TS akan melaporkan kesalahan.</p>\n<h3 id=\"function-component\" style=\"position:relative;\"><a href=\"#function-component\" aria-label=\"function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Component</h3>\n<p>Seperti namanya, komponen ini didefinisikan menggunakan fungsi JavaScript dimana argumen pertamanya adalah sebuah <code>props</code> objek.\nTS memberlakukan bahwa type kembaliannya harus dapat diberikan ke <code>JSX.Element</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> FooProp {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">X</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">Y</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> AnotherComponent(</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\">: {</span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string});</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> ComponentFoo(</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\">: FooProp) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> &lt;AnotherComponent name={prop.name} /&gt;;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">Button </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\">: {</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: string}, </span><span style=\"color: #1A1A1A\">context</span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\">color</span><span style=\"color: #000000\">: string }) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> &lt;button&gt;</span></code></div></pre>\n<p>Karena Function Component adalah fungsi JavaScript, maka fungsi overload dapat digunakan di sini:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> ClickableProps {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">: JSX.Element[] | JSX.Element</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> HomeProps </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> ClickableProps {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">home</span><span style=\"color: #000000\">: JSX.Element;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> SideProps </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> ClickableProps {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">side</span><span style=\"color: #000000\">: JSX.Element | string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> MainButton(</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\">: HomeProps): JSX.Element;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> MainButton(</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\">: SideProps): JSX.Element {</span>\n<span style=\"color: #000000\">  ...</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>Catatan: Function Component sebelumnya dikenal sebagai Stateless Function Component (SFC). Karena Function Component tidak dapat lagi dianggap stateless di versi terbaru react, jenis <code>SFC</code> dan aliasnya<code>StatelessComponent</code> tidak digunakan lagi.</p>\n</blockquote>\n<h3 id=\"class-component\" style=\"position:relative;\"><a href=\"#class-component\" aria-label=\"class component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Component</h3>\n<p>Ini memungkinkan untuk mendefinisikan type dari class component.\nNamun, untuk melakukannya, yang terbaik adalah memahami dua istilah baru berikut: <em>type class elemen</em> dan <em>type instance elemen</em>.</p>\n<p>Jika terdapat <code>&#x3C;Expr /></code>, maka <em>type class elemennya</em> adalah <code>Expr</code>.\nJadi pada contoh diatas, jika <code>MyComponent</code> adalah class ES6, maka type class-nya adalah konstruktor dan static dari class tersebut.\nJika <code>MyComponent</code> adalah factory function, maka type class-nya adalah fungsi itu sendiri.</p>\n<p>Setelah type class dibuat, type instance ditentukan oleh gabungan tipe kembalian dari konstruksi type class atau call signature (mana saja yang ada).\nJadi sekali lagi, dalam kasus kelas ES6, jenis instans adalah jenis instans kelas itu, dan dalam kasus factory function, itu akan menjadi jenis nilai yang dikembalikan dari fungsi tersebut.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> MyComponent {</span>\n<span style=\"color: #000000\">  render() {}</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// menggunakan konstruksi signature</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">myComponent </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> MyComponent();</span>\n\n<span style=\"color: #008000\">// type class elemen =&gt; MyComponent</span>\n<span style=\"color: #008000\">// type instance elemen =&gt; { render: () =&gt; void }</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> MyFactoryFunction() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    render: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {},</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// menggunakan call signature</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">myComponent </span><span style=\"color: #000000\">= MyFactoryFunction();</span>\n\n<span style=\"color: #008000\">// type class elemen =&gt; FactoryFunction</span>\n<span style=\"color: #008000\">// type instance elemen =&gt; { render: () =&gt; void }</span></code></div></pre>\n<p>Type elemen instance itu menarik, karena ini harus dapat di-assign ke <code>JSX.ElementClass</code> atau hasilnya akan error.\nStandarnya <code>JSX.ElementClass</code> adalah <code>{}</code>, tetapi ini bisa ditambah untuk membatasi penggunaan JSX hanya untuk jenis yang sesuai dengan interface yang tepat.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> ElementClass {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">render</span><span style=\"color: #000000\">: any;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> MyComponent {</span>\n<span style=\"color: #000000\">  render() {}</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> MyFactoryFunction() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> { render: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {} };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> NotAValidComponent {}</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> NotAValidFactoryFunction() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> {};</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">NotAValidComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">NotAValidFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></code></div></pre>\n<h2 id=\"pemeriksaan-type-atribut\" style=\"position:relative;\"><a href=\"#pemeriksaan-type-atribut\" aria-label=\"pemeriksaan type atribut permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pemeriksaan Type Atribut</h2>\n<p>Langkah pertama untuk memeriksa type atribut adalah menentukan type atribut elemen.\nIni sedikit berbeda antara elemen intrinsik dan berbasis nilai.</p>\n<p>Untuk elemen intrinsik, ini adalah type dari property pada <code>JSX.IntrinsicElements</code></p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> IntrinsicElements {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\">?: boolean };</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// type atribut elemen untuk 'foo' is '{bar?: boolean}'</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #000000\"> /&gt;;</span></code></div></pre>\n<p>Untuk elemen berbasis nilai, ini sedikit lebih kompleks.\nIni ditentukan oleh type dari property pada <em>type elemen instance</em> yang telah ditentukan.\nProperty mana yang digunakan untuk ditentukan oleh <code>JSX.ElementAttributesProperty</code>.\nIni harus dideklarasikan dengan satu property.\nNama property itu kemudian digunakan.\nMulai TypeScript 2.8, jika <code>JSX.ElementAttributesProperty</code> tidak disediakan, jenis parameter pertama dari konstruktor elemen kelas atau pemanggilan Function Component akan digunakan sebagai gantinya.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> ElementAttributesProperty {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// menentukan nama property yang akan digunakan</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> MyComponent {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// menentukan property pada type instance elemen</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">?: string;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// type atribut elemen untuk 'MyComponent' adalah '{foo?: string}'</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;;</span></code></div></pre>\n<p>Type atribut elemen digunakan untuk memeriksa atribut di JSX.\nProperti opsional dan wajib telah didukung.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> IntrinsicElements {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">: string; </span><span style=\"color: #1A1A1A\">optionalProp</span><span style=\"color: #000000\">?: number };</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">optionalProp</span><span style=\"color: #000000\">={0} /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, tidak ada requiredProp</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">={0} /&gt;; </span><span style=\"color: #008000\">// error, requiredProp seharusnya ber-type string</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">unknownProp</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, unknownProp tidak ada</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">some</span><span style=\"color: #000000\">-</span><span style=\"color: #1A1A1A\">unknown</span><span style=\"color: #000000\">-</span><span style=\"color: #1A1A1A\">prop</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok, karena 'some-unknown-prop' bukan identifier yang valid</span></code></div></pre>\n<blockquote>\n<p>Catatan: Jika nama atribut bukan identifier JS yang valid (seperti atribut <code>data- *</code>), itu tidak dianggap sebagai kesalahan jika tidak ditemukan dalam type atribut elemen.</p>\n</blockquote>\n<p>Selain itu, antarmuka <code>JSX.IntrinsicAttributes</code> dapat digunakan untuk menentukan properti tambahan yang digunakan oleh framework JSX yang umumnya tidak digunakan oleh props atau argumen komponen - misalnya <code>key</code> di React. Mengkhususkan lebih lanjut, type generik <code>JSX.IntrinsicClassAttributes&#x3C;T></code> juga dapat digunakan untuk menetapkan type atribut tambahan yang sama hanya untuk class component (dan bukan function component). Dalam type ini, parameter generik sesuai dengan type instance class. Di React, ini digunakan untuk mengizinkan atribut <code>ref</code> dengan type <code>Ref &#x3C;T></code>. Secara umum, semua properti pada interface ini harus bersifat opsional, kecuali Anda bermaksud agar pengguna framework JSX Anda perlu menyediakan beberapa atribut pada setiap tag.</p>\n<p>Spread operator juga bekerja:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">props </span><span style=\"color: #000000\">= { requiredProp: </span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// ok</span>\n\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">badProps </span><span style=\"color: #000000\">= {};</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #1A1A1A\">badProps</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error</span></code></div></pre>\n<h2 id=\"pemeriksaan-type-children\" style=\"position:relative;\"><a href=\"#pemeriksaan-type-children\" aria-label=\"pemeriksaan type children permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pemeriksaan Type Children</h2>\n<p>Di TypeScript 2.3, TS mengenalkan pemeriksaan type pada <em>children</em>. <em>Children</em> adalah property khusus di <em>type atribut elemen</em> dimana child <em>JSXExpression</em> diambil untuk dimasukkan ke atribut.\nMirip dengan bagaimana menggunakan <code>JSX.ElementAttributesProperty</code> untuk menentukan nama dari <em>props</em>, TS menggunakan <code>JSX</code>.\n<code>JSX.ElementChildrenAttribute</code> harus dideklarasikan dengan property tunggal.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> JSX {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> ElementChildrenAttribute {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">: {}; </span><span style=\"color: #008000\">// menentukan nama children untuk digunakan</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;;</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">World</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">CustomComp </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> &lt;div&gt;{</span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">CustomComp</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  {</span><span style=\"color: #A31515\">\"This is just a JS expression...\"</span><span style=\"color: #000000\"> + </span><span style=\"color: #09835A\">1000</span><span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">CustomComp</span><span style=\"color: #000000\">&gt;</span></code></div></pre>\n<p>Anda bisa menentukan type dari <em>children</em> seperti atribut lainnya. Ini akan mengganti type standarnya, misalnya <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a> jika Anda menggunakannya.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> PropsType {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">: JSX.Element</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Component </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> React.Component&lt;PropsType, {}&gt; {</span>\n<span style=\"color: #000000\">  render() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #1A1A1A\">h2</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">        {this.props.</span><span style=\"color: #1A1A1A\">children</span><span style=\"color: #000000\">}</span>\n<span style=\"color: #000000\">      &lt;/</span><span style=\"color: #1A1A1A\">h2</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    )</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// OK</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\">&gt;</span>\n\n<span style=\"color: #008000\">// Error: children adalah type JSX.Element, bukan array dari JSX.Element.</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h2</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h2</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\">&gt;</span>\n\n<span style=\"color: #008000\">// Error: children adalah type JSX.Element, bukan array dari JSX.Element maupun string.</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #1A1A1A\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">h1</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">World</span>\n<span style=\"color: #000000\">&lt;/</span><span style=\"color: #1A1A1A\">Component</span><span style=\"color: #000000\">&gt;</span></code></div></pre>\n<h2 id=\"type-hasil-jsx\" style=\"position:relative;\"><a href=\"#type-hasil-jsx\" aria-label=\"type hasil jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type hasil JSX</h2>\n<p>Secara standar, hasil dari ekspresi JSX ber-type <code>any</code>.\nAnda bisa menyesuaikan type dengan menentukan interface <code>JSX.Element</code>.\nNamun, tidak mungkin untuk mengambil informasi type tentang elemen, atribut atau turunan dari JSX dari interface ini.\nItu adalah black box.</p>\n<h2 id=\"menyematkan-ekspresi\" style=\"position:relative;\"><a href=\"#menyematkan-ekspresi\" aria-label=\"menyematkan ekspresi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menyematkan Ekspresi</h2>\n<p>JSX memungkinkan Anda untuk menyematkan ekspresi di antara tag dengan mengapit ekspresi dengan kurung kurawal (<code>{}</code>).</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">a </span><span style=\"color: #000000\">= (</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    {[\"foo\", \"bar\"].map((</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">) =&gt; (</span>\n<span style=\"color: #000000\">      &lt;</span><span style=\"color: #1A1A1A\">span</span><span style=\"color: #000000\">&gt;{</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> / 2}&lt;/</span><span style=\"color: #1A1A1A\">span</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    ))}</span>\n<span style=\"color: #000000\">  &lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">);</span></code></div></pre>\n<p>Kode di atas akan menghasilkan kesalahan karena Anda tidak dapat membagi string dengan angka.\nOutputnya, saat menggunakan opsi <code>preserve</code>, terlihat seperti:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">a </span><span style=\"color: #000000\">= (</span>\n<span style=\"color: #000000\">  &lt;</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">    {[\"foo\", \"bar\"].map(</span><span style=\"color: #1A1A1A\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> &lt;span&gt;{</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\"> / </span><span style=\"color: #09835A\">2</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #1A1A1A\">span</span><span style=\"color: #000000\">&gt;;</span>\n<span style=\"color: #000000\">    })}</span>\n<span style=\"color: #000000\">  &lt;/</span><span style=\"color: #1A1A1A\">div</span><span style=\"color: #000000\">&gt;</span>\n<span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"integrasi-react\" style=\"position:relative;\"><a href=\"#integrasi-react\" aria-label=\"integrasi react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integrasi React</h2>\n<p>Untuk menggunakan JSX dengan React, anda harus menggunakan <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a>. Typings ini mendefinisikan namespace <code>JSX</code> dengan tepat untuk digunakan dengan React.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #DC0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"react.d.ts\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Props {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> MyComponent </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> React.Component&lt;Props, {}&gt; {</span>\n<span style=\"color: #000000\">  render() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> &lt;span&gt;{</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #1A1A1A\">span</span><span style=\"color: #000000\">&gt;;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span>\n<span style=\"color: #000000\">&lt;</span><span style=\"color: #1A1A1A\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">foo</span><span style=\"color: #000000\">={0} /&gt;; </span><span style=\"color: #008000\">// error</span></code></div></pre>\n<h2 id=\"factory-function\" style=\"position:relative;\"><a href=\"#factory-function\" aria-label=\"factory function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Factory Function</h2>\n<p>Factory function yang digunakan oleh opsi compiler <code>jsx: react</code> dapat dikonfigurasi. Ini dapat disetel menggunakan opsi baris perintah <code>jsxFactory</code>, atau komentar <code>@jsx</code> sebaris untuk menyetelnya pada basis per file. Misalnya, jika Anda menyetel <code>jsxFactory</code> ke <code>createElement</code>, <code>&#x3C;div /></code> akan melakukannya sebagai <code>createElement(\"div\")</code> bukan <code>React.createElement(\"div\")</code>.</p>\n<p>Versi pragma komentar dapat digunakan seperti itu (dalam TypeScript 2.8):</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">preact</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #008000\">/* @jsx preact.h */</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x </span><span style=\"color: #000000\">= &lt;div /&gt;;</span></code></div></pre>\n<p>akan menjadi:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">preact </span><span style=\"color: #000000\">= require(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">preact</span><span style=\"color: #000000\">.h(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></code></div></pre>\n<p>Factory yang dipilih juga akan mempengaruhi di mana namespace <code>JSX</code> dicari (untuk informasi pemeriksaan type) sebelum kembali ke global. Jika factory ditentukan sebagai <code>React.createElement</code> (standar), compiler akan memeriksa <code>React.JSX</code> sebelum memeriksa <code>JSX</code> global. Jika factory ditentukan sebagai <code>h</code>, maka ia akan memeriksa <code>h.JSX</code> sebelum <code>JSX</code> global.</p>","headings":[{"value":"Dasar Penggunaan","depth":2},{"value":"Opeartor as","depth":2},{"value":"Pemeriksaan Type","depth":2},{"value":"Elemen intrinsik","depth":2},{"value":"Elemen Berbasiskan Nilai","depth":2},{"value":"Function Component","depth":3},{"value":"Class Component","depth":3},{"value":"Pemeriksaan Type Atribut","depth":2},{"value":"Pemeriksaan Type Children","depth":2},{"value":"Type hasil JSX","depth":2},{"value":"Menyematkan Ekspresi","depth":2},{"value":"Integrasi React","depth":2},{"value":"Factory Function","depth":2}],"frontmatter":{"permalink":"/id/docs/handbook/jsx.html","title":"JSX","disable_toc":null,"oneline":"Menggunakan JSX dengan TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2jsx","slug":"/id/docs/handbook/jsx.html","repoPath":"/packages/documentation/copy/id/reference/JSX.md","lang":"id","modifiedTime":"2020-10-19T12:28:22.152Z"}}}