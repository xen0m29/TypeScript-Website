{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/mixins.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/id/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/2/types-from-extraction.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/2/types-from-transformation.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/id/docs/handbook/intro-to-js-ts.html"},{"path":"/id/docs/handbook/configuring-watch.html"},{"path":"/id/docs/handbook/jsdoc-supported-types.html"},{"path":"/id/docs/handbook/iterators-and-generators.html"},{"path":"/id/docs/handbook/decorators.html"},{"path":"/id/docs/handbook/jsx.html"},{"path":"/id/docs/handbook/dom-manipulation.html"},{"path":"/id/docs/handbook/react.html"},{"path":"/id/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/id/docs/handbook/mixins.html"},{"path":"/id/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/es/play"},{"path":"/id/play"},{"path":"/ko/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/play"},{"path":"/fa/play"},{"path":"/ja/play"},{"path":"/pt/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"75c6e274-e79e-5f9f-b4d5-7c98ed1b42e8","excerpt":"Bersamaan dengan hierarki OO tradisional, cara populer lainnya untuk membangun kelas dari komponen yang dapat digunakan kembali adalah membangunnya dengan…","html":"<p>Bersamaan dengan hierarki OO tradisional, cara populer lainnya untuk membangun kelas dari komponen yang dapat digunakan kembali adalah membangunnya dengan menggabungkan kelas parsial yang lebih sederhana.\nAnda mungkin sudah familiar dengan ide mixin atau ciri untuk bahasa seperti Scala, dan polanya juga mendapatkan popularitas di komunitas JavaScript.</p>\n<h2 id=\"bagaimana-cara-kerja-mixin\" style=\"position:relative;\"><a href=\"#bagaimana-cara-kerja-mixin\" aria-label=\"bagaimana cara kerja mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bagaimana Cara Kerja Mixin?</h2>\n<p>Pola ini bergantung pada penggunaan Generik dengan warisan kelas untuk memperluas kelas dasar.\nDukungan mixin terbaik TypeScript dilakukan melalui pola ekspresi kelas.\nAnda dapat membaca lebih lanjut mengenai bagaimana pola ini bekerja di <a href=\"https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\">Javscript disini</a>.</p>\n<p>Untuk memulai, kita akan butuh kelas yang akan diterapkan mixin:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.name: string'>name</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAOAnAlgFwKbQN4ChrQDswBbTAXmgCJKBuPaAD2goAY78BPZ6Nne4APYEIqRAFdgqAYgAURUgC5oIlAQDmASmz18qABbIIAOnnlCJdO2gBfHNaA'>Try</a></div></pre>\n<p>Kemudian kamu butuh sebuah type dan sebuah fungsi factory yang mengembalikan sebuah ekspresi kelas untuk meng-extend kelas dasar.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Untuk memulai, kita membutuhkan tipe yang akan kita gunakan untuk memperluas kelas lain.</span>\n<span style=\"color: #008000\">// Tanggung jawab utama adalah mendeklarasikan bahwa tipe yang diteruskan adalah sebuah kelas.</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Constructor = new (...args: any[]) => {}'>Constructor</data-lsp> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span>\n\n<span style=\"color: #008000\">// Mixin ini menambahkan property scale, dengan getter dan setter</span>\n<span style=\"color: #008000\">// untuk mengubahnya dengan properti private yang dienkapsulasi:</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>Scale</data-lsp>&lt;<data-lsp lsp='(type parameter) TBase in Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='type Constructor = new (...args: any[]) => {}'>Constructor</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) Base: TBase extends Constructor'>Base</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) TBase in Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='(local class) Scaling'>Scaling</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) Base: TBase extends Constructor'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Mixin mungkin tidak mendeklarasikan property private/protected</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// namun, Anda dapat menggunakan field private ES2020</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">    <data-lsp lsp='(method) Scaling.setScale(scale: number): void'>setScale</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) scale: number'>scale</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) scale: number'>scale</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> <data-lsp lsp='(property) Scaling.scale: number'>scale</data-lsp>(): number {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEFUDsBcFcGtQFsCmTYBsCGBLANKPDtFsmgEaxwAW8Wko0OADiqAJ70DmoWdDREqC6xIfeqFFxEqJKwBOGWFgDOhFNjXYckAHQAoEKAAq3EZB4ArLAHcs5SSSSksAEyzZqZSK5Txs8qo4-KDkWNR2jCxsnBagrsQo8rAqIW4e4aAqKJSZ8BqqBvrQ7KygAMIA9pAq0MkAxtCV8qAAvKCQKDagABS6-VjyXCoAXLyQ7ADaALoAlG0AfKAA3gC+ANz6hmAAsjgAHjqgOjjeWEhhtBLM8pUKJVn1HigEvhYSXCjQ0EnxEtnfJLbSQwBDeESXCakN5ca63e6nG44ABuWB+HG48RwKEgdGYKkwQRGWwAZqJGjhqqAAMpPDAoAA8xgAQqo2Ch9j8fGoqjU6rBGs0Fj1Wdkxiy2fNlvpQKB5F9YPIGPVNGpaR4dDwOVzXGpRWxpbLZUY9ocGOgLEQGEx3DIcb5-IMgiEbnckg8kaifsBXT9GihXDKjUYxBaCABBHzQrDMNHg8ziBgk7EYVygT1otgAUWpACYAAwFoOygD6KjpbHaAEZNsWsl91fSeuXnmNILALkkpXXZdBqDgVLoyxW2o9npsjaBVltJ59oGOm7M2x3yL9DZO5QqlYx+4Ph+O69PZRt9KsgA'>Try</a></div></pre>\n<p>Setelah hal-hal diatas siap, Anda dapat membuat kelas yang mewakili kelas dasar dengan mixin yang diterapkan:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.name: string'>name</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Constructor = new (...args: any[]) => {}'>Constructor</data-lsp> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>Scale</data-lsp>&lt;<data-lsp lsp='(type parameter) TBase in Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='type Constructor = new (...args: any[]) => {}'>Constructor</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) Base: TBase extends Constructor'>Base</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) TBase in Scale&amp;lt;TBase extends Constructor>(Base: TBase): {&amp;#13;    new (...args: any[]): Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='(local class) Scaling'>Scaling</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) Base: TBase extends Constructor'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Mixin mungkin tidak mendeklarasikan property private/protected</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// namun, Anda dapat menggunakan field private ES2020</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">    <data-lsp lsp='(method) Scaling.setScale(scale: number): void'>setScale</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) scale: number'>scale</data-lsp></span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) scale: number'>scale</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> <data-lsp lsp='(property) Scaling.scale: number'>scale</data-lsp>(): number {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling._scale: number'>_scale</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// ---potong---</span>\n<span style=\"color: #008000\">// Buat kelas baru dari kelas Sprite,</span>\n<span style=\"color: #008000\">// dengan Mixin Scale:</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const EightBitSprite: {&amp;#13;    new (...args: any[]): Scale&amp;lt;typeof Sprite>.Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; typeof Sprite'>EightBitSprite</data-lsp> </span><span style=\"color: #000000\">= <data-lsp lsp='function Scale&amp;lt;typeof Sprite>(Base: typeof Sprite): {&amp;#13;    new (...args: any[]): Scale&amp;lt;typeof Sprite>.Scaling;&amp;#13;    prototype: Scale&amp;lt;any>.Scaling;&amp;#13;} &amp;amp; typeof Sprite'>Scale</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Sprite'>Sprite</data-lsp></span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const flappySprite: Scale&amp;lt;typeof Sprite>.Scaling &amp;amp; Sprite'>flappySprite</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='const EightBitSprite: new (name: string) => Scale&amp;lt;typeof Sprite>.Scaling &amp;amp; Sprite'>EightBitSprite</data-lsp>(</span><span style=\"color: #A31515\">\"Bird\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const flappySprite: Scale&amp;lt;typeof Sprite>.Scaling &amp;amp; Sprite'>flappySprite</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Scaling&amp;lt;typeof Sprite>.setScale(scale: number): void'>setScale</data-lsp>(</span><span style=\"color: #09835A\">0.8</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const flappySprite: Scale&amp;lt;typeof Sprite>.Scaling &amp;amp; Sprite'>flappySprite</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Scaling.scale: number'>scale</data-lsp></span><span style=\"color: #000000\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAOAnAlgFwKbQN4ChrQDswBbTAXmgCJKBuPaAD2goAY78BPZ6Nne4APYEIqRAFdgqAYgAURUgC5oIlAQDmASmz18qABbIIAOnnlCJdO2gBfHLdQd4mAMJCVEqYm4F0Ad2gyRkFgiGoQSmAEHADaALpaZAB82NZ0AGZiBJLIQnDAYCDoADwAKgBCkJjoDBgEACYwrsKiHtKJMhUQ6ErllVq4+IjoqGKIBNCgkDCw+SDI6tDVtQ3QnZgD+NAA9FvQALLIDPPQxJlqANbHqMh1YOcn6PXo5+CIkMjnkdBIAk6IDt8UAA3MAYLY-DCSdB1HTbXbyTIAGmgAEF6mBoLd4KCHuo1Jk7l80sh0CA6oDkCCMNAAKKwABMLEZsIA+hBZmYAIx0WFdVAzAroGTswVKAhiYgAI3QiH6sN0BmMbI53BFhSs+FssLUw2UHJkGjFEulXg2m2gQxGY2g+kMRmVgo1NnoqTsOB20AAtN74AIpOpvZ73bsymIcedSZBoJKQmJMSFkNAI+Bpkg0OhEcHMY81F8DkdxgLCgocIJmrTkGo9KgymgEChqRQi0L6+mNDyyyJoGlwPB4BxW43CH4K1Wa3W0xgZJRa4g6pR2zge2A+wPJ+gjHzmzIWEYAByLzsCQpGEACNQyZerwcbtXodtAA'>Try</a></div></pre>\n<h2 id=\"mixin-yang-dibatasi\" style=\"position:relative;\"><a href=\"#mixin-yang-dibatasi\" aria-label=\"mixin yang dibatasi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mixin yang Dibatasi</h2>\n<p>Dalam bentuk di atas, mixin tidak memiliki pengetahuan yang mendasari kelas yang dapat menyulitkan pembuatan desain yang diinginkan.</p>\n<p>Untuk memodelkan ini, kami memodifikasi tipe konstruktor asli untuk menerima argumen generic.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Ini adalah konstruktor kita sebelumnya:</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Constructor = new (...args: any[]) => {}'>Constructor</data-lsp> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span>\n<span style=\"color: #008000\">// Sekarang kami menggunakan versi generik yang dapat menerapkan batasan</span>\n<span style=\"color: #008000\">// pada kelas tempat mixin ini diterapkan</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp> = {}> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> <data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp>;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEEkDsEtQQwCZwDZwBagNYHtIGcAXAJwFdMDsitoC5Q8BTAIweRIFtIBPOALgCgCXAA4NQAYVyFSAYwpUAvKEgMA7qAAUAOh1wiAczy943ANoBdAJSgFAPlABvAL4BufiFABlBpj1xI+lhw7LDsDAH6JJBwvpCgAG4MRHiw+uFJ0JigPAGgSMJwBKBhKkRwwrGgTIVweP7uYAVIWKy1oAQM7AVFIQAe0HEDsAg0SeWxgiJiAOKS+MQkcpQAPAAqNo5O9koq6tq6BkYmXBbWdqCrLkA'>Try</a></div></pre>\n<p>Ini memungkinkan untuk membuat kelas yang hanya bekerja dengan kelas dasar yang dibatasi:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp> = {}> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> <data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp>;</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.name: string'>name</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #008000\">// ---potong---</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Positionable = new (...args: any[]) => {&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}'>Positionable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;{ <data-lsp lsp='(property) setPos: (x: number, y: number) => void'>setPos</data-lsp>: (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: number'>y</data-lsp></span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void }&gt;;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Spritable = new (...args: any[]) => typeof Sprite'>Spritable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp>>;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Loggable = new (...args: any[]) => {&amp;#13;    print: () => void;&amp;#13;}'>Loggable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;{ <data-lsp lsp='(property) print: () => void'>print</data-lsp>: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void }&gt;;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gwgewHYGdgCcCuBjYD0A8AKlALxQDeAvgHxlRIQDuUAFAHScCG6A5igC4oXJCADaAXQCUZOkQDcAKGwAbLihRQAymHQBLYNAqKoDLgFto5AETWlpgB70ADPaggXSk1GzI0WXHxWJAsIIX89JF4ZY1NTYAALPRR2EMt6NIg3KkUcgHo8qABaErAEPCiSosVQSCgABQQUAz1kLgAjFStYRFQMHDxCCigUCGBGwTYHISRMc3aIdAAadxm5hfQZUjoANwQ9ABMoWiVa6B19YA6u+ng-fsDCM4QAM21dAwgaU-BoABkELxeNdunc+gFBgRhh8kMAhKwtrt9kcTkA'>Try</a></div></pre>\n<p>Kemudian Anda dapat membuat mixin yang hanya berfungsi jika Anda memiliki basis tertentu untuk dibangun:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp> = {}> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) args: any[]'>args</data-lsp></span><span style=\"color: #000000\">: any[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> <data-lsp lsp='(type parameter) T in type GConstructor&amp;lt;T = {}>'>T</data-lsp>;</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.name: string'>name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.name: string'>name</data-lsp> = </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Positionable = new (...args: any[]) => {&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}'>Positionable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;{ <data-lsp lsp='(property) setPos: (x: number, y: number) => void'>setPos</data-lsp>: (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: number'>x</data-lsp></span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: number'>y</data-lsp></span><span style=\"color: #000000\">: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void }&gt;;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Spritable = new (...args: any[]) => typeof Sprite'>Spritable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite'>Sprite</data-lsp>>;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type Loggable = new (...args: any[]) => {&amp;#13;    print: () => void;&amp;#13;}'>Loggable</data-lsp> = <data-lsp lsp='type GConstructor&amp;lt;T = {}> = new (...args: any[]) => T'>GConstructor</data-lsp>&lt;{ <data-lsp lsp='(property) print: () => void'>print</data-lsp>: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void }&gt;;</span>\n<span style=\"color: #008000\">// ---potong---</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function Jumpable&amp;lt;TBase extends GConstructor&amp;lt;{&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}>>(Base: TBase): {&amp;#13;    new (...args: any[]): Jumpable;&amp;#13;    prototype: Jumpable&amp;lt;any>.Jumpable;&amp;#13;} &amp;amp; TBase'>Jumpable</data-lsp>&lt;<data-lsp lsp='(type parameter) TBase in Jumpable&amp;lt;TBase extends GConstructor&amp;lt;{&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}>>(Base: TBase): {&amp;#13;    new (...args: any[]): Jumpable;&amp;#13;    prototype: Jumpable&amp;lt;any>.Jumpable;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='type Positionable = new (...args: any[]) => {&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}'>Positionable</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) Base: TBase extends GConstructor&amp;lt;{ setPos: (x: number, y: number) => void; }>'>Base</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) TBase in Jumpable&amp;lt;TBase extends GConstructor&amp;lt;{&amp;#13;    setPos: (x: number, y: number) => void;&amp;#13;}>>(Base: TBase): {&amp;#13;    new (...args: any[]): Jumpable;&amp;#13;    prototype: Jumpable&amp;lt;any>.Jumpable;&amp;#13;} &amp;amp; TBase'>TBase</data-lsp>) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='(local class) Jumpable'>Jumpable</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) Base: TBase extends GConstructor&amp;lt;{ setPos: (x: number, y: number) => void; }>'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='(method) Jumpable.jump(): void'>jump</data-lsp>() {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #008000\">// Mixin ini hanya akan berfungsi jika itu melewati kelas dasar</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #008000\">// yang telah ditetapkan setPos</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #008000\">// karena kendala Positionable.</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.<data-lsp lsp='(property) setPos: (x: number, y: number) => void'>setPos</data-lsp>(</span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #09835A\">20</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gwgewHYGdgCcCuBjYD0A8AKlALxQDeAvgHxlRIQDuUAFAHScCG6A5igC4oXJCADaAXQCUZOkQDcAKGwAbLihRQAymHQBLYNAqKoDLgFto5AETWlpgB70ADPaggXSk1GzI0WXHxWJAsIIX89JF4ZY1NTYAALPRR2EMt6NIg3KkUc0EgoAAUEFAM9ZC4AIxUrWERUDBw8QgooFAhgYsE2ByEkTHNKiHQAGnc+gaH0GVI6ADcEPQATKFolfOgdfWAqmvp4P0bAwg2EADNtXQMIGnXwaAAZBF5eXdqDhoDmglarpGAhKwZvNFis1ooAPQQqAAWjhYAQeCicJhikUZ0wSFw5SQUAAUgMwG9iAAhdTQCAOQxIJaaLplCrVG6sMntIREVkQGLedAdTDoXGqdSaAnmIlMqCU6m0qCcyjeUwAK0JQPlcTiUKgAFk9A5IlBInooAkRCAuMIANYiKBTDFRUpQRV6K0G4CYKCWGpMLjAI0WiBqTRLdQ8BUa6FmqJQQxqBJQJbXHZgK249qdEph0yaq28kJQf00rhqIolBkhJnsTPRpIpNNdVjOMYAJmcUjcphyHaUVCAA'>Try</a></div></pre>\n<h2 id=\"pola-alternatif\" style=\"position:relative;\"><a href=\"#pola-alternatif\" aria-label=\"pola alternatif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pola Alternatif</h2>\n<p>Versi sebelumnya dari dokumen ini merekomendasikan cara untuk menulis mixin di mana Anda membuat runtime dan hierarki type secara terpisah, lalu menggabungkannya di akhir:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Setiap mixin adalah kelas ES tradisional</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Jumpable'>Jumpable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Jumpable.jump(): void'>jump</data-lsp>() {}</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Duckable'>Duckable</data-lsp> {</span>\n<span style=\"color: #000000\">  <data-lsp lsp='(method) Duckable.duck(): void'>duck</data-lsp>() {}</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Termasuk basisnya</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite&amp;#13;interface Sprite'>Sprite</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Sprite.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Kemudian Anda membuat antarmuka yang menggabungkan mixin</span>\n<span style=\"color: #008000\">// yang diharapkan dengan nama yang sama sebagai basis Anda</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> <data-lsp lsp='class Sprite&amp;#13;interface Sprite'>Sprite</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='class Jumpable'>Jumpable</data-lsp>, <data-lsp lsp='class Duckable'>Duckable</data-lsp> {}</span>\n<span style=\"color: #008000\">// Terapkan mixin ke dalam kelas dasar melalui</span>\n<span style=\"color: #008000\">// JS saat runtime</span>\n<span style=\"color: #000000\"><data-lsp lsp='function applyMixins(derivedCtor: any, constructors: any[]): void'>applyMixins</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Sprite'>Sprite</data-lsp></span><span style=\"color: #000000\">, [</span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Jumpable'>Jumpable</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Duckable'>Duckable</data-lsp></span><span style=\"color: #000000\">]);</span>\n\n<span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let player: Sprite'>player</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Sprite(): Sprite'>Sprite</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let player: Sprite'>player</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Jumpable.jump(): void'>jump</data-lsp>();</span>\n<span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='let player: Sprite'>player</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.x: number'>x</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let player: Sprite'>player</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Sprite.y: number'>y</data-lsp>);</span>\n\n<span style=\"color: #008000\">// Ini dapat hidup di mana saja di basis kode Anda:</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function applyMixins(derivedCtor: any, constructors: any[]): void'>applyMixins</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) derivedCtor: any'>derivedCtor</data-lsp></span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) constructors: any[]'>constructors</data-lsp></span><span style=\"color: #000000\">: any[]) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) constructors: any[]'>constructors</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(method) Array&amp;lt;any>.forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void'>forEach</data-lsp>((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) baseCtor: any'>baseCtor</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">    <data-lsp lsp='var Object: ObjectConstructor'>Object</data-lsp>.<data-lsp lsp='(method) ObjectConstructor.getOwnPropertyNames(o: any): string[]'>getOwnPropertyNames</data-lsp>(<data-lsp lsp='(parameter) baseCtor: any'>baseCtor</data-lsp>.<data-lsp lsp='any'>prototype</data-lsp>).<data-lsp lsp='(method) Array&amp;lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void'>forEach</data-lsp>((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">      <data-lsp lsp='var Object: ObjectConstructor'>Object</data-lsp>.<data-lsp lsp='(method) ObjectConstructor.defineProperty(o: any, p: string | number | symbol, attributes: PropertyDescriptor &amp;amp; ThisType&amp;lt;any>): any'>defineProperty</data-lsp>(</span>\n<span style=\"color: #000000\">        <data-lsp lsp='(parameter) derivedCtor: any'>derivedCtor</data-lsp>.<data-lsp lsp='any'>prototype</data-lsp>,</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">        <data-lsp lsp='var Object: ObjectConstructor'>Object</data-lsp>.<data-lsp lsp='(method) ObjectConstructor.getOwnPropertyDescriptor(o: any, p: string | number | symbol): PropertyDescriptor'>getOwnPropertyDescriptor</data-lsp>(<data-lsp lsp='(parameter) baseCtor: any'>baseCtor</data-lsp>.<data-lsp lsp='any'>prototype</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">      );</span>\n<span style=\"color: #000000\">    });</span>\n<span style=\"color: #000000\">  });</span>\n<span style=\"color: #000000\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFAigDKe08mADqALbwAe8AdqJgCY6YAWoA1nmyZIoAKIlQcDvEjwA9sxwFEQyCIBSAV1pVMAI2x5QAbwKhQAK21UAFAEoTAXwLPlqkQBFNiPvsMmzUHZvPnsnFwIiMAAVPFhaYU0+UD1hGWYAT0w3YRESKgRoI1NzBlAAXlAABgBuQIyK6rrXYgBpPFpNdkpWAEFmTjoOvU1MaDZmaEx4pMxQLOYAcyGlxf1NJd9WeiZmKPnMJaD4bmnqLaC8JcPQRQSDo8hMe-xUtfgUtJF+zgIWItgWEQRnyhSMeAYRQGGmsfjwABpQF4fHDwsRYrBzjcdix+EZOEJaHjVEFhNMhkJsJp4Pt1BInmNQLANhRaIRqFRsBkALKMFiQGyg+BFREAbS0OjhiORvgMeAAunY6gRDONOZgMnFGsw8AB3UgFYV4ex1dWa2AAOisOhNygUkDkhgt2DkixsZriFoYiI9loySsixAAkswPpxdONuPBgjRunRDnMnhY5nHUrIRHw5OwjD9MCgCOgNsh5KwOVzebsBdmEAA3PDsADC0DksDQhwyiMQ9rg3mbsEgbcyosVAXMXeYMGZyBbkAt6BbokwiG4NhsabwTZbDnKAD5R+ZQAB5PQWPDIC2LciH3XMAAKsDkVDi0AyADlnngBevN5aCnJmy+T52HOC5LiuNh3Hg257iUB7mMep7ntm6AsHg96Ps+GQ2IEcHmNW8B1o2fYWn+AEZE+8I4bhkGUbhB4IWe0AXleN7oU+sAvh4n6IAgVB9muwgbsRpH-uRCK3B+dhUeYAZwY4smgPJzRAA'>Try</a></div></pre>\n<p>Pola ini tidak terlalu bergantung pada compiler, dan lebih banyak pada basis kode Anda untuk memastikan runtime dan sistem tipe tetap sinkron dengan benar.</p>\n<h2 id=\"kendala\" style=\"position:relative;\"><a href=\"#kendala\" aria-label=\"kendala permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kendala</h2>\n<p>Pola mixin didukung secara native di dalam compiler TypeScript oleh code flow analysis.\nAda beberapa kasus di mana Anda dapat mencapai tepi dukungan native.</p>\n<h4 id=\"decorator-dan-mixin-4881\" style=\"position:relative;\"><a href=\"#decorator-dan-mixin-4881\" aria-label=\"decorator dan mixin 4881 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator dan Mixin <a href=\"https://github.com/microsoft/TypeScript/issues/4881\"><code>#4881</code></a></h4>\n<p>Anda tidak bisa menggunakan decorator untuk menyediakan mixin melalui code flow analysis:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Fungsi dekorator yang mereplikasi pola mixin:</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const Pausable: (target: typeof Player) => typeof Pausable'>Pausable</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) target: typeof Player'>target</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='class Player'>Player</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='(local class) Pausable'>Pausable</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='(parameter) target: typeof Player'>target</data-lsp> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Pausable.shouldFreeze: boolean'>shouldFreeze</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">};</span>\n\n<span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const Pausable: (target: typeof Player) => typeof Pausable'>Pausable</data-lsp></span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Player'>Player</data-lsp> {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Player.x: number'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Player.y: number'>y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">// Kelas Player tidak menggabungkan type dekorator:</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const player: Player'>player</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Player(): Player'>Player</data-lsp>();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const player: Player'>player</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='any'>shouldFreeze</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'shouldFreeze' does not exist on type 'Player'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'shouldFreeze' does not exist on type 'Player'.</span>\n<span style=\"color: #008000\">// Aspek runtime ini dapat direplikasi secara manual</span>\n<span style=\"color: #008000\">// melalui komposisi tipe atau penggabungan interface.</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> <data-lsp lsp='type FreezablePlayer = typeof Player &amp;amp; {&amp;#13;    shouldFreeze: boolean;&amp;#13;}'>FreezablePlayer</data-lsp> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> <data-lsp lsp='class Player'>Player</data-lsp> &amp; { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) shouldFreeze: boolean'>shouldFreeze</data-lsp></span><span style=\"color: #000000\">: boolean };</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const playerTwo: FreezablePlayer'>playerTwo</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> <data-lsp lsp='constructor Player(): Player'>Player</data-lsp>() </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> unknown) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> <data-lsp lsp='type FreezablePlayer = typeof Player &amp;amp; {&amp;#13;    shouldFreeze: boolean;&amp;#13;}'>FreezablePlayer</data-lsp>;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const playerTwo: FreezablePlayer'>playerTwo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) shouldFreeze: boolean'>shouldFreeze</data-lsp></span><span style=\"color: #000000\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEiC1AXKAEwDMHAnHWAGIBXdAHMqSUABNIAazIUyoAJ7ZRoNAkixcSGdnGhYJXNnVJoSdMxql0VTKAAK2QVWwAjXJFABeUAAocBBFITFZMJXgSADMnEyVEAEpfAD5QAG8aUFBNTEEEdFAiEyoqJxc3T28YTAxJMqCQh0zs7KoACxJBXEl+TUgAL28-aLwqSABuLNAAXym5mhpwZ1cPLxsSssd4xAzp6F9QAAYp7KVDk5oZxfoAaUgSuOwEhFBMJElsGXUMEREPYQiPSFCLwKSyeSUBDWWz2Qw7V5+dCQADuTxe-kSU20z0QADoOl0en1IINJjcwABBKjwb4IYTvNCgSwST6wChSJCabS6fQScZEbDkdSqQR4Pg-Ey4QQSOQoIziAzvMEUFyGX7-dyA1TMrCIUZESB4mig7wkwZrSDbXGIt6RSAxdG7ABkGVAhO6vX6Q1Y7hIxkgOoWNhIdgcOJeABUUSRDv5kWjrRjkvpQMIZOgSCj0CmyuaBpak4hsQjoyQCZ1PfnJkA'>Try</a></div></pre>\n<h4 id=\"static-property-mixins-17829\" style=\"position:relative;\"><a href=\"#static-property-mixins-17829\" aria-label=\"static property mixins 17829 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Property Mixins <a href=\"https://github.com/microsoft/TypeScript/issues/17829\"><code>#17829</code></a></h4>\n<p>Pola ekspresi kelas membuat singletons, jadi mereka tidak dapat dipetakan pada sistem type untuk mendukung tipe variabel yang berbeda.</p>\n<p>Anda bisa mengatasinya dengan menggunakan fungsi untuk mengembalikan kelas Anda yang berbeda berdasarkan generik:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function base&amp;lt;T>(): typeof Base'>base</data-lsp>&lt;<data-lsp lsp='(type parameter) T in base&amp;lt;T>(): typeof Base'>T</data-lsp>>() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Base'>Base</data-lsp> {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base.prop: T'>prop</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in base&amp;lt;T>(): typeof Base'>T</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Base'>Base</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> <data-lsp lsp='function derived&amp;lt;T>(): typeof Derived'>derived</data-lsp>&lt;<data-lsp lsp='(type parameter) T in derived&amp;lt;T>(): typeof Derived'>T</data-lsp>>() {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Derived'>Derived</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='function base&amp;lt;T>(): typeof Base'>base</data-lsp>&lt;<data-lsp lsp='(type parameter) T in derived&amp;lt;T>(): typeof Derived'>T</data-lsp>>() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived.anotherProp: T'>anotherProp</data-lsp></span><span style=\"color: #000000\">: <data-lsp lsp='(type parameter) T in derived&amp;lt;T>(): typeof Derived'>T</data-lsp>;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='class Derived'>Derived</data-lsp></span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> <data-lsp lsp='class Spec'>Spec</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> <data-lsp lsp='function derived&amp;lt;string>(): typeof Derived'>derived</data-lsp>&lt;string>() {}</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='class Spec'>Spec</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Base&amp;lt;string>.prop: string'>prop</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='class Spec'>Spec</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Derived&amp;lt;string>.anotherProp: string'>anotherProp</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAIwIYGcCmAeAKgPgAoBKRAbwChFEIAbDdRAIQ03KusXSlVgkQAOAJzgCAXIlwBuDgF8OQzFBBCkLLDPkVQkWAkQATTEJgA3TAbxFSlanQaIAIsbMXEmAB5RMYA4zRYViTsnFw8fIioYHBQABbGAAoi4pIy1PLUisqqTi7mBpoUFPbojADKApj8nt6+jEYm+djcJmAA5tbkWhVVAHTColKIAPTDYa1tFD0QvVEx8UJJgyNjLTDtQA'>Try</a></div></pre>","headings":[{"value":"Bagaimana Cara Kerja Mixin?","depth":2},{"value":"Mixin yang Dibatasi","depth":2},{"value":"Pola Alternatif","depth":2},{"value":"Kendala","depth":2},{"value":"Decorator dan Mixin #4881","depth":4},{"value":"Static Property Mixins #17829","depth":4}],"frontmatter":{"permalink":"/id/docs/handbook/mixins.html","title":"Mixins","disable_toc":null,"oneline":"Menggunakan pola mixin dengan TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2mixins","slug":"/id/docs/handbook/mixins.html","repoPath":"/packages/documentation/copy/id/reference/Mixins.md","lang":"id","modifiedTime":"2020-10-19T12:28:22.152Z"}}}