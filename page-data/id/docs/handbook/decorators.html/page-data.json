{"componentChunkName":"component---src-templates-documentation-tsx","path":"/id/docs/handbook/decorators.html","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/id/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/2/types-from-extraction.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/2/types-from-transformation.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/id/docs/handbook/intro-to-js-ts.html"},{"path":"/id/docs/handbook/configuring-watch.html"},{"path":"/id/docs/handbook/jsdoc-supported-types.html"},{"path":"/id/docs/handbook/iterators-and-generators.html"},{"path":"/id/docs/handbook/decorators.html"},{"path":"/id/docs/handbook/jsx.html"},{"path":"/id/docs/handbook/dom-manipulation.html"},{"path":"/id/docs/handbook/react.html"},{"path":"/id/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/id/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/pt/docs/handbook/tsconfig-json.html"},{"path":"/pt/docs/handbook/Decorators.html"},{"path":"/pt/docs/handbook/module-resolution.html"},{"path":"/pt/docs/handbook/namespaces.html"},{"path":"/pt/docs/handbook/symbols.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/pt/docs/handbook/babel-with-typescript.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/id/docs/handbook/mixins.html"},{"path":"/id/docs/handbook/symbols.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/es/play"},{"path":"/id/play"},{"path":"/ko/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/play"},{"path":"/fa/play"},{"path":"/ja/play"},{"path":"/pt/play"},{"path":"/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/play/3-7/fixits/const-to-let.ts.html"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/play/javascript/working-with-classes/this.ts.html"},{"path":"/play/playground/config/javascript-playgrounds.js.html"},{"path":"/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/play/playground/language/fixits.ts.html"},{"path":"/play/playground/tooling/mobile-support.ts.html"},{"path":"/play/playground/tooling/sharable-urls.ts.html"},{"path":"/play/playground/tooling/typescript-versions.ts.html"},{"path":"/play/typescript/language/soundness.ts.html"},{"path":"/play/typescript/language/structural-typing.ts.html"},{"path":"/play/typescript/language/type-guards.ts.html"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/play/typescript/language-extensions/enums.ts.html"},{"path":"/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/play/typescript/primitives/any.ts.html"},{"path":"/play/typescript/primitives/literals.ts.html"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/play/typescript/type-primitives/tuples.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/es/play/typescript/language/soundness.ts.html"},{"path":"/es/play/typescript/language/structural-typing.ts.html"},{"path":"/es/play/typescript/language/type-guards.ts.html"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/es/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/es/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/es/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/es/play/typescript/primitives/any.ts.html"},{"path":"/es/play/typescript/primitives/literals.ts.html"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/es/play/typescript/type-primitives/tuples.ts.html"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/id/play/3-7/fixits/const-to-let.ts.html"},{"path":"/id/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/id/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/recursive-type-reference.ts.html"},{"path":"/id/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/id/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/id/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/id/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/id/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/id/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/id/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/id/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/id/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/id/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/id/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/id/play/4-0/new-ts-features/variadic-tuples.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/id/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/id/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/id/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/id/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/id/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/id/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ja/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/ja/play/typescript/language-extensions/enums.ts.html"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ja/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/ja/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/ja/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/ja/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/ja/play/typescript/primitives/any.ts.html"},{"path":"/ja/play/typescript/primitives/literals.ts.html"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/ja/play/typescript/type-primitives/tuples.ts.html"},{"path":"/ko/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/ko/play/3-7/fixits/const-to-let.ts.html"},{"path":"/ko/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/ko/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/ko/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/ko/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/ko/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/ko/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/ko/play/typescript/language-extensions/enums.ts.html"},{"path":"/ko/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/ko/play/typescript/primitives/any.ts.html"},{"path":"/ko/play/typescript/primitives/literals.ts.html"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts.html"},{"path":"/pt/play/3-7/fixits/const-to-let.ts.html"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts.html"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts.html"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts.html"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts.html"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts.html"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts.html"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts.html"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts.html"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts.html"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/pt/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/pt/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/pt/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/pt/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/pt/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/pt/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/pt/play/javascript/working-with-classes/this.ts.html"},{"path":"/pt/play/playground/config/javascript-playgrounds.js.html"},{"path":"/pt/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/pt/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/pt/play/playground/language/fixits.ts.html"},{"path":"/pt/play/playground/tooling/mobile-support.ts.html"},{"path":"/pt/play/playground/tooling/sharable-urls.ts.html"},{"path":"/pt/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/enums.ts.html"},{"path":"/pt/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/pt/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/pt/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/pt/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/pt/play/typescript/primitives/any.ts.html"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/pt/play/typescript/type-primitives/tuples.ts.html"},{"path":"/pt/play/typescript/language/structural-typing.ts.html"},{"path":"/pt/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/pt/play/typescript/primitives/literals.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js.html"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js.html"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts.html"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts.html"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts.html"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts.html"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts.html"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts.html"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts.html"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js.html"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts.html"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts.html"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts.html"},{"path":"/zh/play/javascript/working-with-classes/this.ts.html"},{"path":"/zh/play/typescript/language/soundness.ts.html"},{"path":"/zh/play/typescript/language/structural-typing.ts.html"},{"path":"/zh/play/typescript/language/type-guards.ts.html"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts.html"},{"path":"/zh/play/typescript/language-extensions/enums.ts.html"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts.html"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts.html"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts.html"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts.html"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts.html"},{"path":"/zh/play/typescript/primitives/any.ts.html"},{"path":"/zh/play/typescript/primitives/literals.ts.html"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts.html"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts.html"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts.html"},{"path":"/zh/play/typescript/type-primitives/tuples.ts.html"},{"path":"/zh/play/playground/config/javascript-playgrounds.js.html"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts.html"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts.html"},{"path":"/zh/play/playground/language/fixits.ts.html"},{"path":"/zh/play/playground/tooling/mobile-support.ts.html"},{"path":"/zh/play/playground/tooling/sharable-urls.ts.html"},{"path":"/zh/play/playground/tooling/typescript-versions.ts.html"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts.html"},{"path":"/pt/play/typescript/language/type-guards.ts.html"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]},"markdownRemark":{"id":"778c0d25-4f4a-5480-89b9-da9ee46c2a29","excerpt":"Pengenalan Dengan pengenalan Kelas-kelas yang ada di TypeScript dan ES6, sekarang ada skenario tertentu yang memerlukan fitur tambahan untuk mendukung anotasi…","html":"<h2 id=\"pengenalan\" style=\"position:relative;\"><a href=\"#pengenalan\" aria-label=\"pengenalan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pengenalan</h2>\n<p>Dengan pengenalan Kelas-kelas yang ada di TypeScript dan ES6, sekarang ada skenario tertentu yang memerlukan fitur tambahan untuk mendukung anotasi atau modifikasi kelas dan anggota kelas.\nDecorators menyediakan cara untuk menambahkan anotasi-anotasi dan sebuah sintaks pemrogragaman meta untuk deklarasi kelas dan anggota kelas.\nDecorators ada pada <a href=\"https://github.com/tc39/proposal-decorators\">stage 2 proposal</a> untuk JavaScript dan juga tersedia pada TypeScript sebagai fitur eksperimental.</p>\n<blockquote>\n<p>CATATAN  Decorators adalah fitur eksperimental yang mungkin dapat berubah ketika dirilis nanti.</p>\n</blockquote>\n<p>Untuk mengaktifkan Decorators eksperimental, anda harus menambahkan opsi <code>experimentalDecorators</code> ke baris perintah atau ke berkas <code>tsconfig.json</code>.</p>\n<p><strong>Command Line</strong>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">tsc --target ES5 --experimentalDecorators</span></code></div></pre>\n<p><strong>tsconfig.json</strong>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the supported JavaScript language runtime to transpile to\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES5\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#experimentalDecorators'><data-lsp lsp=\"Enable experimental support for TC39 stage 2 decorators\">experimentalDecorators</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"decorator\" style=\"position:relative;\"><a href=\"#decorator\" aria-label=\"decorator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator</h2>\n<p><em>Decorator</em> adalah jenis deklarasi khusus yang dapat dilampirkan ke <a href=\"#class-decorators\">deklarasi kelas</a>, <a href=\"#method-decorators\">method</a>, <a href=\"#accessor-decorators\">accessor</a>, <a href=\"#property-decorators\">property</a>, atau <a href=\"#parameter-decorators\">parameter</a>.\nDecorators menggunakan bentuk <code>@expression</code>, dimana <code>expression</code> harus mengevaluasi fungsi yang akan dipanggil saat proses dengan informasi tentang deklarasi yang didekorasi.</p>\n<p>Sebagai contoh, ada decorator <code>@sealed</code> yang mungkin kita akan menuliskan fungsi <code>sealed</code> sebagai berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> sealed(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// lakukan sesuatu dengan 'target' ...</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>CATATAN  Anda dapat melihat contoh lengkapnya di <a href=\"#class-decorators\">Decorator Kelas</a>.</p>\n</blockquote>\n<h2 id=\"decorator-factories\" style=\"position:relative;\"><a href=\"#decorator-factories\" aria-label=\"decorator factories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator Factories</h2>\n<p>Jika kita ingin menyesuaikan penerapan decorator pada sebuah deklarasi, kita dapat menuliskan sebuah decorator factory. <em>Decorator Factory</em> adalah sebuah fungsi yang mengembalikan ekspresi yang akan dipanggil oleh decorator ketika proses.</p>\n<p>Kita dapat menuliskan decorator factory seperti berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> color(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ini adalah decorator factory</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ini adalah decorator</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// lakukan sesuatu dengan 'target' dan 'value'...</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>CATATAN  Anda dapat melihat contoh lengkap dari penggunaan decorator factory di <a href=\"#method-decorators\">Method Decorators</a></p>\n</blockquote>\n<h2 id=\"komposisi-decorator\" style=\"position:relative;\"><a href=\"#komposisi-decorator\" aria-label=\"komposisi decorator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Komposisi Decorator</h2>\n<p>Lebih dari satu decorator dapat diterapkan pada sebuah deklarasi, seperti contoh berikut:</p>\n<ul>\n<li>\n<p>Penerapan dengan satu baris:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #000000\"> @</span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">x</span></code></div></pre>\n</li>\n<li>\n<p>Penerapan lebih dari satu baris:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">f</span>\n<span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">g</span>\n<span style=\"color: #1A1A1A\">x</span></code></div></pre>\n</li>\n</ul>\n<p>Ketika lebih dari satu decorator diterapkan ke sebuah deklarasi, evaluasi yang dilakukan mirip seperti <a href=\"http://wikipedia.org/wiki/Function_composition\">fungsi komposisi pada matematika</a>. Pada model ini, ketika mengkomposisikan fungsi <em>f</em> dan <em>g</em>, maka akan menjadi (<em>f</em> ∘ <em>g</em>)(<em>x</em>) yang sama dengan <em>f</em>(<em>g</em>(<em>x</em>)).</p>\n<p>Dengan demikian, langkah-langkah berikut dilakukan saat mengevaluasi beberapa dekorator pada satu deklarasi di TypeScript:</p>\n<ol>\n<li>Ekspresi untuk setiap dekorator dievaluasi dari atas ke bawah.</li>\n<li>Hasilnya kemudian disebut sebagai fungsi dari bawah ke atas.</li>\n</ol>\n<p>If we were to use <a href=\"#decorator-factories\">decorator factories</a>, we can observe this evaluation order with the following example:</p>\n<p>JIka kita menggunakan <a href=\"#decorator-factories\">decorator factories</a>, kita dapat mengamati urutan evaluasi ini dengan contoh berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> f() {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #A31515\">\"f(): evaluated\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: PropertyDescriptor</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"f(): called\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> g() {</span>\n<span style=\"color: #000000\">  console.log(</span><span style=\"color: #A31515\">\"g(): evaluated\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: PropertyDescriptor</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    console.log(</span><span style=\"color: #A31515\">\"g(): called\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> C {</span>\n<span style=\"color: #000000\">  @f()</span>\n<span style=\"color: #000000\">  @g()</span>\n<span style=\"color: #000000\">  method() {}</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Yang akan mencetak keluaran ini ke console:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">f(): evaluated</span>\n<span style=\"color: #000000\">g(): evaluated</span>\n<span style=\"color: #000000\">g(): called</span>\n<span style=\"color: #000000\">f(): called</span></code></div></pre>\n<h2 id=\"evaluasi-decorator\" style=\"position:relative;\"><a href=\"#evaluasi-decorator\" aria-label=\"evaluasi decorator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Evaluasi Decorator</h2>\n<p>Ada urutan yang jelas tentang bagaimana decorator diterapkan ke berbagai deklarasi yang ada di dalam kelas:</p>\n<ol>\n<li><em>Parameter Decorators</em>, diikuti oleh <em>Method</em>, <em>Accessor</em>, atau <em>Property Decorators</em> diterapkan untuk setiap anggota instance.</li>\n<li><em>Parameter Decorators</em>, diikuti oleh <em>Method</em>, <em>Accessor</em>, atau <em>Property Decorators</em> diterapkan untuk setiap anggota statis.</li>\n<li><em>Parameter Dekorator</em> diterapkan untuk konstruktor.</li>\n<li><em>Class Decorators</em> diterapkan untuk kelas.</li>\n</ol>\n<h2 id=\"decorator-kelas\" style=\"position:relative;\"><a href=\"#decorator-kelas\" aria-label=\"decorator kelas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator Kelas</h2>\n<p><em>Class Decorator</em> dideklarasikan tepat sebelum deklarasi kelas.\nDekorator kelas diterapkan ke konstruktor kelas dan dapat digunakan untuk mengamati, memodifikasi, atau mengganti definisi kelas.\nDekorator kelas tidak dapat digunakan dalam file deklarasi, atau dalam konteks ambien lainnya (seperti pada kelas <code>deklarasi</code>).</p>\n<p>Ekspresi untuk dekorator kelas akan dipanggil sebagai fungsi pada waktu proses, dengan konstruktor kelas yang didekorasi sebagai satu-satunya argumennya.</p>\n<p>Jika dekorator kelas mengembalikan nilai, deklarasi kelas akan diganti dengan fungsi konstruktor yang disediakan.</p>\n<blockquote>\n<p>CATATAN  Jika Anda memilih untuk mengembalikan fungsi konstruktor baru, Anda harus berhati-hati dalam mempertahankan prototipe asli.\nLogika yang menerapkan dekorator pada waktu proses <strong>tidak akan</strong> melakukannya untukmu.</p>\n</blockquote>\n<p>Berikut ini adalah contoh decorator kelas (<code>@sealed</code>) yang diterapkan ke kelas <code>Greeter</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">sealed</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  greet() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Kita dapat mendefinisikan dekorator <code>@sealed</code> menggunakan deklarasi fungsi berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> sealed(</span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">: Function) {</span>\n<span style=\"color: #000000\">  Object.seal(</span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  Object.seal(constructor.prototype);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Ketika <code>@sealed</code> dijalankan, itu akan menyegel konstruktor dan prototipe-nya.</p>\n<p>Selanjutnya kita memiliki contoh bagaimana menimpa konstruktor.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> classDecorator&lt;T </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #1A1A1A\">args</span><span style=\"color: #000000\">: any[]): {} }&gt;(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">constructor</span><span style=\"color: #000000\">: T</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> constructor {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">newProperty</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"new property\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"override\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">@</span><span style=\"color: #1A1A1A\">classDecorator</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">property</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"property\"</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">hello</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #000000\">console.log(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Greeter(</span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">));</span></code></div></pre>\n<h2 id=\"method-decorators\" style=\"position:relative;\"><a href=\"#method-decorators\" aria-label=\"method decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method Decorators</h2>\n<p><em>Method Decorator</em> dideklarasikan tepat sebelum deklarasi metthod.\nDekorator diterapkan ke <em>Property Descriptor</em> untuk method, yang dapat digunakan untuk mengamati, memodifikasi, atau mengganti definisi method.\nMethod Dekorator tidak dapat digunakan dalam file deklarasi, saat kelebihan beban, atau dalam konteks ambien lainnya (seperti dalam kelas <code>declare</code>).</p>\n<p>Ekspresi untuk method decorator akan dipanggil sebagai fungsi pada waktu proses, dengan tiga argumen berikut:</p>\n<ol>\n<li>Bisa memiliki fungsi konstruktor kelas untuk anggota statis, atau prototipe kelas untuk anggota instance.</li>\n<li>Nama anggota.</li>\n<li>The <em>Property Descriptor</em> untuk anggota.</li>\n</ol>\n<blockquote>\n<p>CATATAN  <em>Property Descriptor</em> akan menjadi <code>undefined</code> jika target skripmu dibawah <code>ES5</code>.</p>\n</blockquote>\n<p>Jika method decorator mengembalikan sebuah nilai, maka akan digunakan sebagai <em>Property Descriptor</em> untuk method.</p>\n<blockquote>\n<p>CATATAN  Nilai yang dikembalikan akan dibiarkan, jika target skripmu dibawah <code>ES5</code>.</p>\n</blockquote>\n<p>Berikut adalah contoh penerapan method decorator (<code>@enumerable</code>) ke method yang ada pada kelas <code>Greeter</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">: string;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @enumerable(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  greet() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Kita dapat mendefinisikan dekorator <code>@enumerable</code> menggunakan fungsi deklarasi berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> enumerable(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: boolean) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: PropertyDescriptor</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">enumerable</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Decorator <code>@enumerable(false)</code> disini adalah sebuah <a href=\"#decorator-factories\">decorator factory</a>.\nKetika decorator <code>@enumerable(false)</code> dipanggil, ia akan merubah <code>enumerable</code> property dari property descriptor.</p>\n<h2 id=\"decorator-aksesor\" style=\"position:relative;\"><a href=\"#decorator-aksesor\" aria-label=\"decorator aksesor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator Aksesor</h2>\n<p>Sebuah <em>Accessor Decorator</em> dideklarasikan tepat sebelum sebuah deklarasi aksesor.\nDecorator aksesor diterapkan ke <em>Property Descriptor</em> untuk aksesor dan dapat digunakan untuk mengamati, memodifikasi, atau mengganti definisi aksesor.\nDecorator aksesor tidak dapat digunakan dalam deklarasi file, atau dalam konteks ambien lainnya (seperti dalam kelas <code>declare</code>).</p>\n<blockquote>\n<p>CATATAN  TypeScript melarang penerapan decorator ke aksesor <code>get</code> dan <code>set</code> untuk single member.\nSebaliknya, semua decorator untuk anggota harus diterapkan ke pengakses pertama yang ditentukan dalam urutan dokumen.\nIni karena dekorator berlaku untuk <em>Property Descriptor</em>, yang menggabungkan aksesor <code>get</code> dan<code>set</code>, bukan setiap deklarasi secara terpisah.</p>\n</blockquote>\n<p>Ekspresi untuk decorator pengakses akan dipanggil sebagai fungsi pada waktu proses, dengan tiga argumen berikut:</p>\n<ol>\n<li>Bisa memiliki fungsi konstruktor kelas untuk anggota statis, atau prototipe kelas untuk anggota instance.</li>\n<li>Nama anggota.</li>\n<li>The <em>Property Descriptor</em> untuk anggota.</li>\n</ol>\n<blockquote>\n<p>CATATAN  <em>Property Descriptor</em> akan menjadi <code>undefined</code>, jika target skripmu dibawah <code>ES5</code>.</p>\n</blockquote>\n<p>Jika aksesor decorator mengembalikan sebuah nilai, ia akan digunakan sebagai <em>Property Descriptor</em> untuk anggota.</p>\n<blockquote>\n<p>CATATAN  Nilai yang dikembalikan akan dibiarkan, jika target skripmu dibawah <code>ES5</code>.</p>\n</blockquote>\n<p>Berikut ada contoh penerapan aksesor decorator (<code>@configurable</code>) ke anggota kelas <code>Point</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Point {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: number, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: number) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @configurable(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> x() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_x</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @configurable(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> y() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_y</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Kita dapat mendefinisikan decorator <code>@configurable</code> menggunakan deklarasi fungsi berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> configurable(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: boolean) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: PropertyDescriptor</span>\n<span style=\"color: #000000\">  ) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">configurable</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"property-decorators\" style=\"position:relative;\"><a href=\"#property-decorators\" aria-label=\"property decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Decorators</h2>\n<p>Sebuah <em>Property Decorator</em> dideklarasikan tepat sebelum deklarasi properti.\n<em>Property Decorator</em> tidak dapat digunakan dalam deklarasi file, atau dalam konteks ambien lainnya (seperti dalam kelas <code>declare</code>).</p>\n<p>Ekspresi untuk property decorator akan dipanggil sebagai fungsi pada waktu proses, dengan dua argumen berikut:</p>\n<ol>\n<li>Dapat berupa fungsi konstruktor kelas untuk anggota statis, atau prototipe kelas untuk anggota instance.</li>\n<li>Nama anggota.</li>\n</ol>\n<blockquote>\n<p>CATATAN  <em>Property Descriptior</em> tidak menyediakan sebuah argumen untuk property decorator karena bergantung tentang bagaimana property decorator diinisialisasi pada TypeScript.\nIni karena, saat ini tidak ada mekanisme untuk mendeskripsikan sebuah instance property ketika mendefinisikan anggota dari sebuah prototipe, dan tidak ada cara untuk mengamati atau memodifikasi initializer untuk property. Dan nilai kembalian juga akan dibiarkan.\nSehingga, sebuah property decorator hanya bisa digunakan untuk mengamati property dengan nama yang spesifik, yang telah dideklarasikan pada sebuah kelas.</p>\n</blockquote>\n<p>Kita dapat menggunakan informasi tersebut untuk memantau property metadata, seperti pada contoh berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  @format(</span><span style=\"color: #A31515\">\"Hello, %s\"</span><span style=\"color: #000000\">)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">: string;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  greet() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatString </span><span style=\"color: #000000\">= getFormat(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"greeting\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatString</span><span style=\"color: #000000\">.replace(</span><span style=\"color: #A31515\">\"%s\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Kemudian, kita dapat mendefinisikan decorator <code>@format</code> dan fungsi <code>getFormat</code> dengan menggunakan deklarasi fungsi berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">formatMetadataKey </span><span style=\"color: #000000\">= Symbol(</span><span style=\"color: #A31515\">\"format\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> format(</span><span style=\"color: #1A1A1A\">formatString</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> Reflect.metadata(</span><span style=\"color: #1A1A1A\">formatMetadataKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">formatString</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> getFormat(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: any, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> Reflect.getMetadata(</span><span style=\"color: #1A1A1A\">formatMetadataKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Decorator <code>@format(\"Hello, %s\")</code> disini adalah sebuah <a href=\"#decorator-factories\">decorator factory</a>.\nKetika <code>@format(\"Hello, %s\")</code> dipanggil, ia akan menambahkan property metadata menggunakan fungsi <code>Reflect.metadata</code> dari pustaka <code>reflect-metadata</code>.\nKetika <code>getFormat</code> dipanggil, ia akan membaca format dari nilai metadata-nya.</p>\n<blockquote>\n<p>CATATAN  Contoh ini membutuhkan pustaka <code>reflect-metadata</code>.\nLihat <a href=\"#metadata\">Metadata</a> untuk informasi lebih lanjut mengenai pustaka <code>reflect-metadata</code>.</p>\n</blockquote>\n<h2 id=\"parameter-decorators\" style=\"position:relative;\"><a href=\"#parameter-decorators\" aria-label=\"parameter decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Decorators</h2>\n<p><em>Parameter Decorator</em> dideklarasikan tepat sebelum a parameter dideklarasikan.\nParameter decorator diterapkan ke fungsi konstruktor pada kelas atau saat deklarasi method.\nParameter decorator tidak dapat digunakan dalam deklarasi file, overload, atau dalam konteks ambien lainnya (seperti dalam kelas <code>declare</code>).</p>\n<p>Ekspresi untuk parameter decorator akan dipanggil sebagai fungsi pada waktu proses, dengan tiga argumen berikut:</p>\n<ol>\n<li>Dapat berupa fungsi konstruktor kelas untuk anggota statis, atau prototipe kelas untuk anggota instance.</li>\n<li>Nama anggota.</li>\n<li>Indeks ordinal dari parameter dalam daftar parameter fungsi.</li>\n</ol>\n<blockquote>\n<p>CATATAN  Sebuah parameter decorator hanya bisa digunakan untuk mengamati sebuah parameter yang telah dideklarasikan pada sebuah method.</p>\n</blockquote>\n<p>Nilai kembalian dari parameter decorator akan dibiarkan.</p>\n<p>Berikut adalah contoh penggunaan parameter decorator (<code>@required</code>) pada anggota kelas <code>Greeter</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Greeter {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">: string;</span>\n\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">message</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validate</span>\n<span style=\"color: #000000\">  greet(@</span><span style=\"color: #1A1A1A\">required</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">: string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">greeting</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Kemudian, kita dapat mendefinisikan decorator <code>@required</code> dan <code>@validate</code> menggunakan deklarasi fungsi berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredMetadataKey </span><span style=\"color: #000000\">= Symbol(</span><span style=\"color: #A31515\">\"required\"</span><span style=\"color: #000000\">);</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> required(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: Object,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string | symbol,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">parameterIndex</span><span style=\"color: #000000\">: number</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">existingRequiredParameters</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] </span><span style=\"color: #000000\">=</span>\n<span style=\"color: #000000\">    Reflect.getOwnMetadata(</span><span style=\"color: #1A1A1A\">requiredMetadataKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">) || [];</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">existingRequiredParameters</span><span style=\"color: #000000\">.push(</span><span style=\"color: #1A1A1A\">parameterIndex</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  Reflect.defineMetadata(</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">requiredMetadataKey</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">existingRequiredParameters</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">propertyKey</span>\n<span style=\"color: #000000\">  );</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> validate(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">propertyName</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: TypedPropertyDescriptor&lt;Function&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">method </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.value;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.value = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredParameters</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number[] </span><span style=\"color: #000000\">= Reflect.getOwnMetadata(</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">requiredMetadataKey</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #1A1A1A\">propertyName</span>\n<span style=\"color: #000000\">    );</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">requiredParameters</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">parameterIndex</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">requiredParameters</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #1A1A1A\">parameterIndex</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.length ||</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">[</span><span style=\"color: #1A1A1A\">parameterIndex</span><span style=\"color: #000000\">] === </span><span style=\"color: #0000FF\">undefined</span>\n<span style=\"color: #000000\">        ) {</span>\n<span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> Error(</span><span style=\"color: #A31515\">\"Missing required argument.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">        }</span>\n<span style=\"color: #000000\">      }</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">method</span><span style=\"color: #000000\">.apply(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Decorator <code>@required</code> menambahkan entri metadata yang menandakan bahwa parameter tersebut diperlukan.\nDecorator <code>@validate</code> kemudian akan memvalidasi semua argumen yang ada, sebelum method-nya dijalankan.</p>\n<blockquote>\n<p>CATATAN  Contoh ini memerlukan pustaka <code>reflect-metadata</code>\nLihat <a href=\"#metadata\">Metadata</a> untuk informasi lebih lanjut mengenai pustaka <code>reflect-metadata</code>.</p>\n</blockquote>\n<h2 id=\"metadata\" style=\"position:relative;\"><a href=\"#metadata\" aria-label=\"metadata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Metadata</h2>\n<p>Beberapa contoh menggunakan pustaka <code>reflect-metadata</code> yang menambahkan polyfill untuk <a href=\"https://github.com/rbuckton/ReflectDecorators\">API metadata eksperimental</a>.\nPustaka ini belum menjadi bagian dari standar ECMAScript (JavaScript).\nNamun, ketika decorator secara resmi diadopsi sebagai bagian dari standar ECMAScript, ekstensi ini akan diusulkan untuk diadopsi.</p>\n<p>Anda dapat memasang pustaka ini melalui npm:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">npm i reflect-metadata --save</span></code></div></pre>\n<p>TypeScript menyertakan dukungan eksperimental untuk menghadirkan jenis metadata tertentu untuk deklarasi yang memiliki decorator.\nUntuk mengaktifkan dukungan eksperimental ini, Anda harus mengatur opsi compiler <code>emitDecoratorMetadata</code> baik pada baris perintah atau di <code>tsconfig.json</code> Anda:</p>\n<p><strong>Command Line</strong>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">shell</div><div class='code-container'><code><span style=\"color: #000000\">tsc --target ES5 --experimentalDecorators --emitDecoratorMetadata</span></code></div></pre>\n<p><strong>tsconfig.json</strong>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #000000\">{</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the supported JavaScript language runtime to transpile to\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES5\"</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#experimentalDecorators'><data-lsp lsp=\"Enable experimental support for TC39 stage 2 decorators\">experimentalDecorators</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata'><data-lsp lsp=\"Adds additional type metadata to decorators in emitted code\">emitDecoratorMetadata</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Ketika diaktifkan, selama pustaka <code>reflect-metadata</code> di-import, informasi jenis design-time tambahan akan diekspos saat runtime.</p>\n<p>Kita dapat melihat action pada contoh berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"reflect-metadata\"</span><span style=\"color: #000000\">;</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Point {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #000000\">: number;</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Line {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">: Point;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">: Point;</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validate</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p0(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: Point) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p0() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validate</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p1(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: Point) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p1() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> validate&lt;T&gt;(</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">: any,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">: string,</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">: TypedPropertyDescriptor&lt;T&gt;</span>\n<span style=\"color: #000000\">) {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">set </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">set</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #000000\">.set = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: T) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">type </span><span style=\"color: #000000\">= Reflect.getMetadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">type</span><span style=\"color: #000000\">)) {</span>\n<span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> TypeError(</span><span style=\"color: #A31515\">\"Invalid type.\"</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">    }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #1A1A1A\">set</span><span style=\"color: #000000\">.call(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">);</span>\n<span style=\"color: #000000\">  };</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Compiler TypeScript akan memasukkan informasi jenis design-time menggunakan decorator <code>@Reflect.metadata</code>.\nAnda dapat menganggapnya setara dengan TypeScript berikut:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Line {</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">: Point;</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">: Point;</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validate</span>\n<span style=\"color: #000000\">  @Reflect.metadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, Point)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p0(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: Point) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p0() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p0</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n\n<span style=\"color: #000000\">  @</span><span style=\"color: #1A1A1A\">validate</span>\n<span style=\"color: #000000\">  @Reflect.metadata(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, Point)</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> p1(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">: Point) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> p1() {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">_p1</span><span style=\"color: #000000\">;</span>\n<span style=\"color: #000000\">  }</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<p>CATATAN  Decorator metadata adalah fitur experimental dan mungkin dapat menyebabkan gangguan pada rilis di masa mendatang.</p>\n</blockquote>","headings":[{"value":"Pengenalan","depth":2},{"value":"Decorator","depth":2},{"value":"Decorator Factories","depth":2},{"value":"Komposisi Decorator","depth":2},{"value":"Evaluasi Decorator","depth":2},{"value":"Decorator Kelas","depth":2},{"value":"Method Decorators","depth":2},{"value":"Decorator Aksesor","depth":2},{"value":"Property Decorators","depth":2},{"value":"Parameter Decorators","depth":2},{"value":"Metadata","depth":2}],"frontmatter":{"permalink":"/id/docs/handbook/decorators.html","title":"Decorators","disable_toc":null,"oneline":"Ringkasan Dekorator TypeScript","beta":null}},"prev":null,"next":null},"pageContext":{"id":"2decorators","slug":"/id/docs/handbook/decorators.html","repoPath":"/packages/documentation/copy/id/reference/Decorators.md","lang":"id","modifiedTime":"2020-10-19T12:28:22.152Z"}}}